{
  "settings": {
    "hasHeaders": true,
    "constrainDragToContainer": true,
    "reorderEnabled": true,
    "selectionEnabled": false,
    "popoutWholeStack": false,
    "blockedPopoutsThrowError": true,
    "closePopoutsOnUnload": true,
    "showPopoutIcon": false,
    "showMaximiseIcon": false,
    "showCloseIcon": false,
    "responsiveMode": "onload",
    "tabOverlapAllowance": 0,
    "reorderOnTabMenuClick": true,
    "tabControlOffset": 10
  },
  "dimensions": {
    "borderWidth": 5,
    "borderGrabWidth": 15,
    "minItemHeight": 10,
    "minItemWidth": 10,
    "headerHeight": 20,
    "dragProxyWidth": 300,
    "dragProxyHeight": 200
  },
  "labels": {
    "close": "close",
    "maximise": "maximise",
    "minimise": "minimise",
    "popout": "open in new window",
    "popin": "pop in",
    "tabDropdown": "additional tabs"
  },
  "content": [
    {
      "type": "row",
      "isClosable": true,
      "reorderEnabled": true,
      "title": "",
      "content": [
        {
          "type": "stack",
          "width": 46.11764705882353,
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "activeItemIndex": 0,
          "content": [
            {
              "type": "component",
              "componentName": "codeEditor",
              "title": "* star.json",
              "componentState": {
                "code": [
                  "// Welcome to Cascade Studio!   Here are some useful functions:",
                  "//  Translate(), Rotate(), Scale(), Union(), Difference(), Intersection()",
                  "//  Box(), Sphere(), Cylinder(), Cone(), Text3D(), Polygon()",
                  "//  Offset(), Extrude(), RotatedExtrude(), Revolve(), Pipe(), Loft(), ",
                  "//  FilletEdges(), ChamferEdges(),",
                  "//  Slider(), Button(), Checkbox()",
                  "let radius = Slider(\"Radius\", 10.0 , 2.0 , 20.0);",
                  "",
                  "",
                  "function Point(x, y, z) {",
                  "  return new oc.gp_Pnt(x, y, z);",
                  "}",
                  "",
                  "function Segment(pt1, pt2) {",
                  "  return new oc.GC_MakeSegment(pt1, pt2).Value();",
                  "}",
                  "",
                  "function make_edge(geom){",
                  "  return new oc.BRepBuilderAPI_MakeEdge(geom).Edge();",
                  "}",
                  "",
                  "function make_wire(geom){",
                  "  return new oc.BRepBuilderAPI_MakeWire(geom).Wire();",
                  "}",
                  "",
                  "function Ax2(point, direction){",
                  "  return new oc.gp_Ax2(point, direction); ",
                  "}",
                  "",
                  "function MakeWire(elements){",
                  "",
                  "  let builder = new oc.BRepBuilderAPI_MakeWire();",
                  "  for (const element of elements) {",
                  "    builder.Add(new oc.BRepBuilderAPI_MakeWire(element).Wire());",
                  "  }",
                  "  ",
                  "  return builder.Wire()",
                  "}",
                  "",
                  "function profile_along_path(profile, path){ ",
                  "  return new oc.BRepOffsetAPI_MakePipe(path, profile).Shape();",
                  "}",
                  "",
                  "function profiles_along_path(profiles, path){",
                  "  let builder = new oc.BRepOffsetAPI_MakePipeShell(path);",
                  "  for (const profile of profiles) {",
                  "    builder.Add(profile);",
                  "  }",
                  "  builder.Build();",
                  "  builder.MakeSolid();",
                  "  return builder.Shape();",
                  "}",
                  "",
                  "let p1 = Point(0, 10, -10);",
                  "let p2 = Point(0, 10, 10);",
                  "let p3 = Point(0, -10, 10);",
                  "let p4 = Point(0, -10, -10);",
                  "",
                  "let e1 = make_edge(Segment(p1, p2));",
                  "let e2 = make_edge(Segment(p2, p3));",
                  "let e3 = make_edge(Segment(p3, p4));",
                  "let e4 = make_edge(Segment(p4, p1));",
                  "",
                  "let p5 = Point(0, 0, 0);",
                  "let p6 = Point(100, 0, 0);",
                  "let segment = Segment(p5, p6);",
                  "",
                  "let edge = MakeWire([e1, e2, e3, e4]);",
                  "sceneShapes.push(edge);",
                  "",
                  "let path = MakeWire([make_edge(segment)]);",
                  "sceneShapes.push(path);",
                  "",
                  "let t1 = new oc.gp_Trsf();",
                  "t1.SetTranslation(new oc.gp_Vec(100, 0, 0));",
                  "let loc1 = new oc.TopLoc_Location(t1);",
                  "",
                  "let circle = make_wire(make_edge(new oc.GC_MakeCircle(new oc.gp_Circ(Ax2(new oc.gp_Pnt(50, 0, 0), new oc.gp_Dir(1, 0, 0)), radius)).Value()));",
                  "sceneShapes.push(circle);",
                  "let pipe = profiles_along_path([edge, circle, edge.Moved(loc1)] , path);",
                  "sceneShapes.push(pipe);",
                  "",
                  "",
                  "// Don't forget to push imported or oc-defined shapes into sceneShapes to add them to the workspace!"
                ]
              },
              "width": 50,
              "isClosable": false,
              "reorderEnabled": true
            }
          ]
        },
        {
          "type": "column",
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "width": 53.88235294117647,
          "content": [
            {
              "type": "stack",
              "height": 80,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "cascadeView",
                  "title": "CAD View",
                  "componentState": {
                    "componentName": "cascadeView",
                    "MeshRes": 0.1,
                    "MeshResRange": [
                      0.01,
                      2
                    ],
                    "Cache?": true,
                    "Radius": 2,
                    "RadiusRange": [
                      2,
                      20
                    ]
                  },
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            },
            {
              "type": "stack",
              "height": 20,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "console",
                  "title": "Console",
                  "componentState": {},
                  "height": 20,
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "isClosable": true,
  "reorderEnabled": true,
  "title": "",
  "openPopouts": [],
  "maximisedItemId": null
}