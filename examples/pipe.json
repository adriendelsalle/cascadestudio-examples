{
  "settings": {
    "hasHeaders": true,
    "constrainDragToContainer": true,
    "reorderEnabled": true,
    "selectionEnabled": false,
    "popoutWholeStack": false,
    "blockedPopoutsThrowError": true,
    "closePopoutsOnUnload": true,
    "showPopoutIcon": false,
    "showMaximiseIcon": false,
    "showCloseIcon": false,
    "responsiveMode": "onload",
    "tabOverlapAllowance": 0,
    "reorderOnTabMenuClick": true,
    "tabControlOffset": 10
  },
  "dimensions": {
    "borderWidth": 5,
    "borderGrabWidth": 15,
    "minItemHeight": 10,
    "minItemWidth": 10,
    "headerHeight": 20,
    "dragProxyWidth": 300,
    "dragProxyHeight": 200
  },
  "labels": {
    "close": "close",
    "maximise": "maximise",
    "minimise": "minimise",
    "popout": "open in new window",
    "popin": "pop in",
    "tabDropdown": "additional tabs"
  },
  "content": [
    {
      "type": "row",
      "isClosable": true,
      "reorderEnabled": true,
      "title": "",
      "content": [
        {
          "type": "stack",
          "width": 50,
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "activeItemIndex": 0,
          "content": [
            {
              "type": "component",
              "componentName": "codeEditor",
              "title": "pipe.json",
              "componentState": {
                "code": [
                  "// Welcome to Cascade Studio!   Here are some useful functions:",
                  "//  Translate(), Rotate(), Scale(), Union(), Difference(), Intersection()",
                  "//  Box(), Sphere(), Cylinder(), Cone(), Text3D(), Polygon()",
                  "//  Offset(), Extrude(), RotatedExtrude(), Revolve(), Pipe(), Loft(), ",
                  "//  FilletEdges(), ChamferEdges(),",
                  "//  Slider(), Button(), Checkbox()",
                  "",
                  "let holeRadius = Slider(\"Radius\", 3.0 , 2.0 , 4.0);",
                  "",
                  "function Point(x, y, z) {",
                  "  return new oc.gp_Pnt(x, y, z);",
                  "}",
                  "",
                  "function Segment(pt1, pt2) {",
                  "  return new oc.GC_MakeSegment(pt1, pt2).Value();",
                  "}",
                  "",
                  "function make_edge(geom){",
                  "  return new oc.BRepBuilderAPI_MakeEdge(geom).Edge();",
                  "}",
                  "",
                  "function Arc(axis, radius, start_angle, end_angle, clockwise){",
                  "  let circle = new oc.gp_Circ(axis, radius);",
                  "  return new oc.GC_MakeArcOfCircle(circle, start_angle, end_angle, clockwise).Value();",
                  "}",
                  "",
                  "function Ax2(point, direction){",
                  "  return new oc.gp_Ax2(point, direction); ",
                  "}",
                  "",
                  "function MakeWire(g1, g2, g3){",
                  "",
                  "  let builder = new oc.BRepBuilderAPI_MakeWire(make_edge(g1),",
                  "                                               make_edge(g2),",
                  "                                               make_edge(g3));",
                  "",
                  "  /* Should work instead of passing 3 edges",
                  "  for (const element of elements) {",
                  "    builder.Add(new oc.BRepBuilderAPI_MakeEdge(element).Edge());",
                  "  }",
                  "  */",
                  "  return builder.Wire()",
                  "}",
                  "",
                  "function profile_along_path(profile, path){ ",
                  "  return new oc.BRepOffsetAPI_MakePipe(path, profile).Shape();",
                  "}",
                  "",
                  "let p1 = Point(0, 0, 0);",
                  "let p2 = Point(20, 0, 0);",
                  "let p3 = Point(30, 0, 10);",
                  "let p4 = Point(30, 0, 30);",
                  "",
                  "let segment1 = Segment(p1, p2);",
                  "let segment2 = Segment(p3, p4);",
                  "let arc = Arc(Ax2(new oc.gp_Pnt(20, 0, 10), new oc.gp_Dir(0, -1, 0)), 10, 0,  Math.PI/2., true);",
                  "",
                  "let path = MakeWire(segment1, arc, segment2);",
                  "sceneShapes.push(path);",
                  "let profile = new oc.GC_MakeCircle(new oc.gp_Circ(Ax2(new oc.gp_Pnt(20, 0, 0), new oc.gp_Dir(1, 0, 0)), holeRadius)).Value()",
                  "",
                  "let pipe = profile_along_path(make_edge(profile), path);",
                  "sceneShapes.push(pipe);"
                ]
              },
              "width": 50,
              "isClosable": false,
              "reorderEnabled": true
            }
          ]
        },
        {
          "type": "column",
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "width": 50,
          "content": [
            {
              "type": "stack",
              "height": 80,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "cascadeView",
                  "title": "CAD View",
                  "componentState": {
                    "componentName": "cascadeView",
                    "MeshRes": 0.1,
                    "MeshResRange": [
                      0.01,
                      2
                    ],
                    "Cache?": true,
                    "Radius": 3.05,
                    "RadiusRange": [
                      2,
                      4
                    ],
                    "Radius1": 2.46,
                    "Radius1Range": [
                      2,
                      4
                    ]
                  },
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            },
            {
              "type": "stack",
              "height": 20,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "console",
                  "title": "Console",
                  "componentState": {},
                  "height": 20,
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "isClosable": true,
  "reorderEnabled": true,
  "title": "",
  "openPopouts": [],
  "maximisedItemId": null
}